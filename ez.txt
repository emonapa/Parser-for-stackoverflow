//var _b;
// Program 2: Vypocet faktorialu (rekurzivne)
const ifj = @import("ifj24.zig");
// Hlavni funkce
pub fn main() void {
    ifj.write("Zadejte cislo pro vypocet faktorialu: ");
    const inp = ifj.readi32();
 if (a) |INP| {
        if (INP < 0) {
            ifj.write("Faktorial nelze spocitat!\n");
        } else {
            const vysl = factorial(INP);
            ifj.write("Vysledek: "); ifj.write(vysl);
        }
    } else {
        ifj.write("Chyba pri nacitani celeho cisla!\n");
  }
}

// Pomocna funkce pro dekrementaci celeho cisla o zadane cislo
pub fn decrement(n: i32, m: i32) i32 {
    return  n-m ;
}


// Definice funkce pro vypocet hodnoty faktorialu
pub fn factorial(n: i32) i32 {
    var result: i32 = 0 - 1;
    if (n < 2) {
        result = 1;
    } else {
        const decremented_n = decrement(n, 1);
        const temp_result = factorial(decremented_n);
        result = n * temp_result;
    }
    return result;
}


// Hello World example in IFJ24
// run it on Merlin.fit.vutbr.cz by: zig run hello.zig

const ifj = @import("ifj24.zig");

pub fn main() void {
  const y : i32 = 24;
  ifj.write("Hello from IFJ"); // one-parameter function only
  ifj.write(y);
  ifj.write("\n");
}

// Program 1: Vypocet faktorialu (iterativne)
// Hlavni telo programu
const ifj = @import("ifj24.zig");
pub fn main() void {
    ifj.write("Zadejte cislo pro vypocet faktorialu\n");
    const a = ifj.readi32();
    if (a) |val| {
        if (val < 0) {
            ifj.write("Faktorial ");
            ifj.write(val);
            ifj.write(" nelze spocitat\n");
        } else {
            var d: f64 = ifj.i2f(val);
            var vysl: f64 = 1.0;
            while (d > 0) {
                vysl = vysl * d;
                d = d - 1.0;
            }
            ifj.write("Vysledek: ");
            ifj.write(vysl);
            ifj.write(" = ");
            const vysl_i32 = ifj.f2i(vysl);
            ifj.write(vysl_i32);
            ifj.write("\n");
        }
    } else { // a == null
        ifj.write("Faktorial pro null nelze spocitat\n");
    }
}

// Program 1: Vypocet faktorialu (iterativne)
// Hlavni telo programu
const ifj = @import("ifj24.zig");
pub fn main() void {
    ifj.write("Zadejte cislo pro vypocet faktorialu\n");
    const a = ifj.readi32();
    if (a) |val| {
        if (val < 0) {
            ifj.write("Faktorial ");
            ifj.write(val);
            ifj.write(" nelze spocitat\n");
        } else {
            var d: f64 = ifj.i2f(val);
            var vysl: f64 = 1.0;
            while (d > 0) {
                vysl = vysl * d;
                d = d - 1.0;
            }
            ifj.write("Vysledek: ");
            ifj.write(vysl);
            ifj.write(" = ");
            const vysl_i32 = ifj.f2i(vysl);
            ifj.write(vysl_i32);
            ifj.write("\n");
        }
    } else { // a == null
        ifj.write("Faktorial pro null nelze spocitat\n");
    }
}

// Program 3: Prace s retezci a vestavenymi funkcemi
const ifj = @import("ifj24.zig");

// Hlavni funkce
pub fn main() void {
    const str1 = ifj.string("Toto je nejaky text v programu jazyka IFJ24");
    var str2 = ifj.string(", ktery jeste trochu obohatime");
    str2 = ifj.concat(str1, str2);
    ifj
        .  write(str1);
    ifj.write("\n");
    ifj.write(str2);
    ifj.write("\n");
    ifj.write("Zadejte serazenou posloupnost vsech malych pismen a-h, ");

    var newInput = ifj.readstr();
    var all: []u8 = ifj.string("");
    while (newInput) |inpOK| {
        const abcdefgh = ifj.string("abcdefgh"); 
        const strcmpResult = ifj.strcmp(inpOK, abcdefgh);
        if (strcmpResult == 0) {
            ifj.write("Spravne zadano!\n");
            ifj.write(all); // vypsat spojene nepodarene vstupy
            newInput = null; // misto break;
        } else {
            ifj.write("Spatne zadana posloupnost, zkuste znovu:\n");
            all = ifj.concat(all, inpOK); // spojuji neplatne vstupy
            newInput = ifj.readstr();
        }
    }
}

const ifj = @import("ifj24.zig");

pub fn f (x : i32) i32    // seznam parametru
{ //deklarace funkce; v IFJ24 nejsou blokove komentare
  if(x<10){return x-1;}else{const y = x - 1; // cannot redefine x (shadowing is forbidden)
    ifj.write("calling g with "); ifj.write(y); ifj.write("\n");
    const res = g(y);
    return res;
  }
}

pub fn g(x:i32) i32 {
  if (x > 0) {
    ifj.write("calling f with "); ifj.write(x); ifj.write("\n"); 
    const y = f(x); // inicializace konstanty volanim funkce
    return y; 
  } else {
  
  return 200;
  
  }
}

pub fn main() void {
  const res = g(10);
  ifj.write("res: "); ifj.write(res); ifj.write("\n");
}

// Ukazka prace s retezci a vestavenymi funkcemi 
const ifj = @import("ifj24.zig");

pub fn main() void {
  const s1 : []u8 = ifj.string( 
    \\Toto 
    \\ je 
    \\
    \\ nejaky 
                        \\ text  // ve viceradkovem retezcovem literalu nelze mit komentar
    ); // ukoncujici uvozovky ovlivnuji implicitni odsazeni vnitrnich radku retezce
  ifj.write(s1);
}